@model IList<ProductDetailsModel.ProductAttributeModel>
@using Faprika.Core.Domain.Catalog
@using System.Text

@if (Model.Count > 0)
{
    @foreach (var attribute in Model)
    {
        var controlId = $"product_attribute_{attribute.Id}";
        var textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;
        <div class="attribute-item">

            <div class="attribute-label" id="@($"product_attribute_label_{attribute.Id}")">
                <label class="text-prompt">
                    @textPrompt
                </label>
                @if (attribute.IsRequired)
                {
                    <span class="required"></span>
                }
                @if (!string.IsNullOrEmpty(attribute.Description))
                {
                    <span class="attribute-description">
                        @Html.Raw(attribute.Description)
                    </span>
                }
            </div>
            <div class="attribute-input" id="@($"product_attribute_input_{attribute.Id}")">
                @switch (attribute.AttributeControlType)
                {
                    case AttributeControlType.DropdownList:
                        {
                            <select name="@(controlId)" id="@(controlId)"  class="dropdownlist-size">
                                @if (!attribute.IsRequired)
                                {
                                    <option value="0">---</option>
                                }
                                @{ var backInStock = false; }
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    backInStock = attributeValue.AddToCart.DisplayBackInStockSubscription;
                                    string disabled = (!backInStock) ? (attributeValue.IsDisabled ? "true" : null) : null;
                                    var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                            <option selected="@attributeValue.IsPreSelected" data-qty="@attributeValue.StockQuantity" class="@(attributeValue.IsDisabled ? "attribute-value-out-of-stock" : "")"
                                    disabled="@disabled" data-oos="@(attributeValue.IsDisabled)"
                                    value="@attributeValue.Id">
                                @attributeName @(attributeValue.IsDisabled==true ? T("Products.ProductAttributes.OutOfStock").Text:"")
                            </option>
                                    }
                            </select>
                        }
                        break;
                    case AttributeControlType.RadioList:
                        {
                            <ul class="radio-list">
                                @{ var backInStock = false; }
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    backInStock = attributeValue.AddToCart.DisplayBackInStockSubscription;

                                    var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                    <li>
                                        <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" data-qty="@attributeValue.StockQuantity" data-prc="@attributeValue.OverriddenPrice" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" data-oos="@(attributeValue.IsDisabled)" data-combinationId="@attributeValue.CombinationId"
                                               @((!backInStock) ? (attributeValue.IsDisabled ? " disabled=" + attributeValue.IsDisabled : null) : null) />
                                        <label for="@(controlId)_@(attributeValue.Id)" class="@(attributeValue.IsDisabled ? "attribute-value-out-of-stock" : "")">@attributeName</label>
                                    </li>
                                }
                            </ul>
                        }
                        break;
                    case AttributeControlType.Checkboxes:
                        {
                            <ul class="check-list">
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                    <li>
                                        <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" data-qty="@attributeValue.StockQuantity" disabled="@attributeValue.IsDisabled" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                        <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>
                                    </li>
                                }
                            </ul>
                        }
                        break;
                    case AttributeControlType.TextBox:
                        {
                            <input name="@(controlId)" type="text" id="@(controlId)" value="@attribute.DefaultValue" />
                        }
                        break;
                    case AttributeControlType.MultilineTextbox:
                        {
                            <textarea id="@(controlId)" name="@(controlId)">@attribute.DefaultValue</textarea>
                        }
                        break;
                    case AttributeControlType.ColorSquares:
                        {
                            <ul class="color-squares" id="color-squares-@(attribute.Id)">
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                    <li @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"selected-value\"") : null)>
                                        <label for="@(controlId)_@(attributeValue.Id)" style="background-color:@(attributeValue.ColorSquaresRgb);" title="@attributeName">
                                            <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" data-qty="@attributeValue.StockQuantity" disabled="@attributeValue.IsDisabled" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                        </label>
                                    </li>
                                }
                            </ul>
                            <script asp-location="Footer">
                                $(document).ready(function() {
                                    $('.attributes #color-squares-@(attribute.Id)').delegate('input', 'click', function(event) {
                                        $('.attributes #color-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                        $(this).closest('li').addClass('selected-value');
                                    });
                                });
                            </script>
                        }
                        break;
                    case AttributeControlType.ImageSquares:
                        {
                            <ul class="image-squares" id="image-squares-@(attribute.Id)">
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                    <li @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"selected-value\"") : null)>
                                        <label for="@(controlId)_@(attributeValue.Id)">
                                            <span class="image-square-wrapper">
                                                <span class="image-square" style="background:url('@(attributeValue.ImageSquaresPictureModel.ImageUrl)') 50% 50% no-repeat;">&nbsp;</span>
                                            </span>
                                            <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" data-qty="@attributeValue.StockQuantity" disabled="@attributeValue.IsDisabled" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                        </label>
                                        <div class="image-square-tooltip">
                                            <div class="image-square-tooltip-header">@attributeName</div>
                                            <div class="image-square-tooltip-body"><img src="@(attributeValue.ImageSquaresPictureModel.FullSizeImageUrl)" alt="@attributeName" /></div>
                                        </div>
                                    </li>
                                }
                            </ul>
                            <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('.attributes #image-squares-@(attribute.Id)').delegate('input', 'click', function(event) {
                                            $('.attributes #image-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                    });
                            </script>
                        }
                        break;
                }
            </div>
        </div>
    }

}
@if (Model.Count > 0)
{
    //dynamic update support
    var attributeChangeScriptsBuilder = new StringBuilder();
    var productId = Model.First().ProductId;
    var attributeChangeHandlerFuncName = $"attribute_change_handler_{productId}";
    //generate change event script
    foreach (var attribute in Model)
    {
        var controlId = $"product_attribute_{attribute.Id}";
        switch (attribute.AttributeControlType)
        {
            case AttributeControlType.DropdownList:
                {
                    attributeChangeScriptsBuilder.AppendFormat("$('#{0}').on('change',function(){{{1}();}});\n", controlId, attributeChangeHandlerFuncName);
                }
                break;
            case AttributeControlType.RadioList:
            case AttributeControlType.ColorSquares:
            case AttributeControlType.ImageSquares:
                {
                    foreach (var attributeValue in attribute.Values)
                    {
                        attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').on('click',function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
                    }
                }
                break;
            case AttributeControlType.Checkboxes:
                {
                    foreach (var attributeValue in attribute.Values)
                    {
                        attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').on('click',function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
                    }
                }
                break;
            default:
                break;
        }
    }

    //render scripts
    <script asp-location="Footer">
        function @(attributeChangeHandlerFuncName)() {
            $.ajax({
                cache: false,
                url: '@Html.Raw(Url.Action("productdetails_attributechange", "shoppingcart", new {productId = productId }))',
                data: $('#product-details-form').serialize(),
                type: 'post',
                success: function(data) {
                    if (data.price) {
                        $('.price-value-@productId').text(data.price);
                    }
                    if (data.sku) {
                        $('#sku-@productId').text(data.sku).parent(".sku").show();
                    } else {
                        $('#sku-@productId').parent(".sku").hide();
                    }
                    if (data.gtin) {
                        $('#gtin-@productId').text(data.gtin).parent(".gtin").show();
                    } else {
                        $('#gtin-@productId').parent(".gtin").hide();
                    }
                    if (data.stockAvailability) {
                        $('#stock-availability-value-@productId').text(data.stockAvailability);
                    }
                    if (data.deliveryMessage) {
                        $('#delivery-date-value-@productId').text(data.deliveryMessage);
                    }
                    if (data.enabledattributemappingids) {
                        for (var i = 0; i < data.enabledattributemappingids.length; i++) {
                            $('#product_attribute_label_' + data.enabledattributemappingids[i]).show();
                            $('#product_attribute_input_' + data.enabledattributemappingids[i]).show();
                        }
                    }
                    if (data.disabledattributemappingids) {
                        for (var i = 0; i < data.disabledattributemappingids.length; i++) {
                            $('#product_attribute_label_' + data.disabledattributemappingids[i]).hide();
                            $('#product_attribute_input_' + data.disabledattributemappingids[i]).hide();
                        }
                    }
                    if (data.message) {
                        alert(data.message);
                    }
                    $.event.trigger({ type: "product_attributes_changed", changedData: data });
                }
            });
        }
        $(document).ready(function() {
            @*@(attributeChangeHandlerFuncName)();*@
            @Html.Raw(attributeChangeScriptsBuilder.ToString())
        });
    </script>
}